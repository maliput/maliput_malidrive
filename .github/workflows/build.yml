name: gcc

on:
  pull_request:
    branches:
      - main
  workflow_dispatch:
    inputs:
      build_docs:
        description: 'BUILD_DOCS'
        required: true
        default: 'Off'
        type: choice
        options:
        - 'Off'
        - 'On'

env:
  PACKAGE_NAME: maliput_malidrive
  ROS_WS: maliput_ws

jobs:
  compile_and_test:
    name: Compile and test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        ubuntu: [18.04, 20.04]
        include:
          - ubuntu: 18.04
            ROS_DISTRO: dashing
          - ubuntu: 20.04
            ROS_DISTRO: foxy
    container:
      image: ubuntu:${{ matrix.ubuntu }}
    env:
      ROS_DISTRO: ${{ matrix.ROS_DISTRO }}
      # If workflow isn't run via workflow_dispatcher the build_docs variable will be empty and in
      # that case it is expected not to build documentation.
      BUILD_DOCS: ${{ github.event.inputs.build_docs == '' && 'Off' || github.event.inputs.build_docs}}
    steps:
    # setup-ros first since it installs git, which is needed to fetch all branches from actions/checkout
    - uses: ros-tooling/setup-ros@0.2.1
      env:
        ACTIONS_ALLOW_UNSECURE_COMMANDS: true
    # install git from ppa since git 2.18+ is needed to fetch all branches from actions/checkout
    # this step can be removed on 20.04
    - name: install git from ppa
      if: matrix.ubuntu == '18.04'
      shell: bash
      run: |
        apt update;
        apt install -y software-properties-common;
        add-apt-repository -y -u ppa:git-core/ppa;
        apt install -y git;
    - uses: actions/checkout@v2
      with:
        path: ${{ env.ROS_WS }}/src/${{ env.PACKAGE_NAME }}
    # clone private dependencies
    - uses: actions/checkout@v2
      with:
        repository: ToyotaResearchInstitute/maliput
        fetch-depth: 0
        path: ${{ env.ROS_WS }}/src/maliput
        token: ${{ secrets.MALIPUT_TOKEN }}
    - uses: actions/checkout@v2
      with:
        repository: ToyotaResearchInstitute/maliput_drake
        fetch-depth: 0
        path: ${{ env.ROS_WS }}/src/maliput_drake
        token: ${{ secrets.MALIPUT_TOKEN }}
    - name: check if dependencies have a matching branch
      shell: bash
      working-directory: ${{ env.ROS_WS }}/src
      run: ./${PACKAGE_NAME}/.github/try_vcs_checkout ${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}} .
    # clone public dependencies
    - name: vcs import
      shell: bash
      working-directory: ${{ env.ROS_WS }}
      run: vcs import src < src/${PACKAGE_NAME}/.github/dependencies.repos
    - run: colcon graph
      shell: bash
      working-directory: ${{ env.ROS_WS }}
    - name: rosdep install
      shell: bash
      working-directory: ${{ env.ROS_WS }}
      run: |
        rosdep update --include-eol-distros;
        rosdep install  -i -y --rosdistro ${ROS_DISTRO} --from-paths src
    - name: colcon build libraries
      shell: bash
      working-directory: ${{ env.ROS_WS }}
      run: |
        . /opt/ros/${ROS_DISTRO}/setup.bash;
        colcon build --packages-up-to ${PACKAGE_NAME} \
            --event-handlers=console_direct+ \
            --cmake-args -DBUILD_TESTING=OFF -DBUILD_DOCS=${BUILD_DOCS};
    - name: colcon build tests
      shell: bash
      working-directory: ${{ env.ROS_WS }}
      run: |
        . /opt/ros/${ROS_DISTRO}/setup.bash;
        colcon build --packages-select ${PACKAGE_NAME} \
            --event-handlers=console_direct+ \
            --cmake-args -DBUILD_TESTING=ON -DBUILD_DOCS=${BUILD_DOCS};
    - name: colcon test
      shell: bash
      working-directory: ${{ env.ROS_WS }}
      run: |
        . /opt/ros/${ROS_DISTRO}/setup.bash;
        . install/setup.bash;
        colcon test --packages-select ${PACKAGE_NAME} \
            --event-handlers=console_direct+;
        colcon test-result --verbose;
